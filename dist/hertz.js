// Generated by CoffeeScript 1.3.3
(function() {

  (function(name, global, definition) {
    if (typeof module !== "undefined") {
      return module.exports = definition(name, global);
    } else if (typeof define === "function" && typeof define.amd === "object") {
      return define(definition);
    } else {
      return global[name] = definition(name, global);
    }
  })("hertz", this, function(name, global) {
    var hertz;
    hertz = function(channelName) {
      hertz.$.channel(channelName);
      return hertz.$;
    };
    hertz.$ = {
      version: '0.1',
      channelName: "",
      channels: [],
      broadcast: function() {
        var c, callback, context, i, subscriber, _i, _ref;
        c = this.channels[this.channelName];
        for (i = _i = 0, _ref = c.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          subscriber = c[i];
          if (typeof subscriber === "object") {
            callback = subscriber[0];
            context = subscriber[1] || global;
          }
          callback.apply(context, arguments);
        }
        return this;
      },
      channel: function(name) {
        var c;
        c = this.channels;
        if (!c[name]) {
          c[name] = [];
        }
        this.channelName = name;
        return this;
      },
      subscribe: function() {
        var ai, args, c, i, p, _i, _ref;
        args = arguments;
        c = this.channels[this.channelName];
        ai = [];
        for (i = _i = 0, _ref = args.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ai = args[i];
          p = (typeof ai === "function" ? [ai] : ai);
          if (typeof p === "object") {
            c.push(p);
          }
        }
        return this;
      },
      unsubscribe: function() {
        var args, c, i, jo, n, offset, _i, _j, _ref, _ref1;
        args = arguments;
        c = this.channels[this.channelName];
        jo = void 0;
        for (i = _i = 0, _ref = args.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          offset = 0;
          for (n = _j = 0, _ref1 = c.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; n = 0 <= _ref1 ? ++_j : --_j) {
            jo = n - offset;
            if (c[jo][0] === args[i]) {
              c.splice(jo, 1);
              offset++;
            }
          }
        }
        return this;
      }
    };
    return hertz;
  });

}).call(this);
